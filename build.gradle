import org.gradle.internal.os.OperatingSystem


buildscript {
    ext.kotlinVersion = '1.2.21'
    ext.springBootVersion = '2.0.2.RELEASE'


    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

repositories {
    mavenCentral()
}

group 'io.eichler'
version '0.1-SNAPSHOT'

apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'java'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'


def googleCommonProtoVersion = "1.1.0"
def grpcVersion = '1.12.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    compile "org.apache.commons:commons-lang3:3.7"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "com.google.api.grpc:proto-google-common-protos:$googleCommonProtoVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "org.bouncycastle:bcprov-jdk15on:1.59"
    compile "io.grpc:grpc-all:${grpcVersion}"
    compile "io.netty:netty-all:4.1.24.Final"
    compile "io.netty:netty-transport-native-kqueue:4.1.24.Final:${getOsString()}-x86_64"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

static def getOsString() {
    if(OperatingSystem.current().isMacOsX()) {
        return "osx"
    } else if (OperatingSystem.current().isLinux()) {
        return "linux"
    }

    throw new IllegalArgumentException("Only MacOsX and Linux are supported since we are using unix domain sockets")
}

startScripts.enabled = false
